plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.105'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

version = mod_version
group = maven_group

unifiedPublishing {
    project {
        Properties properties = new Properties()
        def env = rootProject.file('local.properties')
        properties.load(env.newDataInputStream())
        def cfToken = properties.getProperty('cf')
        def mrToken = properties.getProperty('mr')
        var changelogFile = rootProject.file("changelog.md").text

        releaseType = "release"
        gameVersions = [minecraft_version]
        gameLoaders = ["neoforge"]
        displayName = "$mod_version - Neo"
        changelog = changelogFile
        mainPublication jar

        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = "998288"
                changelog = changelogFile
            }
        }

        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = "oLJzFcL4"
                version = mod_version
                changelog = changelogFile
            }
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        url "https://maven.firstdark.dev/snapshots"
    }
    maven { url "https://maven.architectury.dev/" }
}

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"
//    runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:$rei_version"
//    api "me.shedaniel:RoughlyEnoughItems-api-neoforge:$rei_version"
//    runtimeOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:$rei_version"
//    implementation "me.shedaniel.cloth:cloth-config-neoforge:$cloth_ver"
//    api "dev.architectury:architectury-neoforge:$arch_ver"

}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                //    "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

minecraft {
    accessTransformers {
        file("src/main/resources/META-INF/accesstransformer.cfg")
    }
}